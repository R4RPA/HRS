# -*- coding: utf-8 -*-
"""cleaned_data_arrange.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OP8DqB-_mF5D5yHLk9uZS4hbgN0-YIV6
"""

# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sn

# df=pd.read_csv("/content/Merged_data_regenerate.csv")
# df.head(10)

# col_names=['trauma1','trauma2',	'trauma3',	'trauma4',	'trauma5',	'trauma6',	'trauma7','ctrauma1','ctrauma2','ctrauma3','ctrauma4']
# other_col=['trauma1.1','trauma2.1',	'trauma3.1',	'trauma4.1',	'trauma5.1',	'trauma6.1',	'trauma7.1','ctrauma1.1','ctrauma2.1','ctrauma3.1','ctrauma4.1']

# for i,j in zip(col_names,other_col):
#   print(df[i].equals(df[j]))

# df.drop(other_col,axis=1,inplace=True)

# df['discrimination1']=7-df['discrimination1']
# df['discrimination2']=7-df['discrimination2']
# df['discrimination3']=7-df['discrimination3']
# df['discrimination4']=7-df['discrimination4']
# df['discrimination5']=7-df['discrimination5']
# df['discrimination6']=7-df['discrimination6']

# `

# columns_to_replace =['trauma1','trauma2',	'trauma3',	'trauma4',	'trauma5',	'trauma6',	'trauma7']
# df['Count_Missing'] = df[columns_to_replace].isnull().sum(axis=1)

# import numpy as np

# years_to_replace = [2006, 2008, 2010, 2012]

# columns_to_replace =['trauma1','trauma2',	'trauma3',	'trauma4',	'trauma5',	'trauma6',	'trauma7']

# for year in years_to_replace:
#     for column in columns_to_replace:
#         # Create a boolean mask to identify the rows for the specified year
#         mask = (df['year_data'] == year)

#         # Replace NaN values in the specified column for the specified year
#         df.loc[mask, column] = df.loc[mask, column].replace(5, 0)

# df['trauma_score']=df['trauma1'].fillna(0)+df['trauma2'].fillna(0)+df['trauma3'].fillna(0)+df['trauma4'].fillna(0)+df['trauma5'].fillna(0)+df['trauma6'].fillna(0)+df['trauma7'].fillna(0)
# df['trauma_score']=(df['trauma_score']*7)/(7-df['Count_Missing'])
# for i in [2014,2016]:
#         # Create a boolean mask to identify the rows for the specified year
#         mask = (df['year_data'] == i)

#         # Replace NaN values in the specified column for the specified year
#         df.loc[mask, 'trauma_score'] = np.nan

# # NaN values for 2014 and 2016 will remain unchanged



# # cols_to_check=['trauma1','trauma2',	'trauma3',	'trauma4',	'trauma5',	'trauma6',	'trauma7']
# # df['trauma_score'] = df.apply(lambda row: None if all(pd.isnull(row[col]) for col in cols_to_check) else row['trauma_score'], axis=1)

# df.loc[df['year_data'] == 2014,'trauma_score'].unique()

# col=['ctrauma1','ctrauma2','ctrauma3','ctrauma4']

# df[col]=df[col].replace({5: 0})
# df['ctrauma_score']=df['ctrauma1'].fillna(0)+df['ctrauma2'].fillna(0)+df['ctrauma3'].fillna(0)+df['ctrauma4'].fillna(0)

# cols_to_check=['ctrauma1','ctrauma2','ctrauma3','ctrauma4']
# df['ctrauma_score'] = df.apply(lambda row: None if all(pd.isnull(row[col]) for col in cols_to_check) else row['ctrauma_score'], axis=1)

# df['Count_Missing'] = df[col].isnull().sum(axis=1)
# df['ctrauma_score']=(df['ctrauma_score']*4)/(4-df['Count_Missing'])
# df.loc[df['year_data'].isin([2014, 2016]), 'ctrauma_score']=np.nan
# df.loc[df['year_data']==2006,'ctrauma_score'].value_counts()
# df.loc[df['ctrauma_score']==2,col]

# import pandas as pd
# import numpy as np

# # Assuming 'df' is your DataFrame and 'col' is the list of columns
# col = ['serial1', 'serial2', 'serial3', 'serial4', 'serial5']

# # Replace values 998 and 999 with 0 in the specified columns
# df[col] = df[col].replace({998: 0, 999: 0})

# # Initialize 'series_points' column with 0
# df['series_points'] = 0

# # Calculate 'series_points' based on conditions
# df['series_points'] += (df['serial1'] == 93).astype(int)
# df['series_points'] += ((df['serial1'] - df['serial2'] == 7) |
#                        (np.isnan(df['serial1']) & (df['serial2'] == 86))).astype(int)

# df['series_points'] += ((df['serial2'] - df['serial3'] == 7) |
#                        (np.isnan(df['serial2']) & (df['serial3'] == 79))).astype(int)
# df['series_points'] += ((df['serial3'] - df['serial4'] == 7) |
#                        (np.isnan(df['serial3']) & (df['serial4'] == 72))).astype(int)
# df['series_points'] += ((df['serial4'] - df['serial5'] == 7) |
#                        (np.isnan(df['serial4']) & (df['serial5'] == 65))).astype(int)

# cols_to_check=['serial1', 'serial2', 'serial3', 'serial4', 'serial5']
# df['series_points'] = df.apply(lambda row: None if all(pd.isnull(row[col]) for col in cols_to_check) else row['series_points'], axis=1)

# backward_points=[]
# for i in df[['backwardcount-try1','backwardcount-try2']].values:
#   if i[0]==1:
#     backward_points.append(2)
#   elif i[0]==5:
#     backward_points.append(0)
#   elif np.isnan(i[0]):
#     backward_points.append(np.nan)
#   elif i[0]==9:
#     backward_points.append(0)
#   else:
#     if i[1]==1:
#       backward_points.append(1)
#     elif i[1]==5:
#       backward_points.append(0)
#     elif i[1]==9:
#       backward_points.append(0)
#     else:
#       backward_points.append(np.nan)


# df['backwardcount_score']=backward_points



# df['cognition_score']=df['backwardcount_score'].fillna(0)+df['immediate10'].fillna(0)+df['delayed10'].fillna(0)+df['series_points'].fillna(0)
# df['cognition_score']=27-df['cognition_score']

# cols_to_check=['backwardcount_score','immediate10','delayed10','series_points']
# df['cognition_score'] = df.apply(lambda row: None if all(pd.isnull(row[col]) for col in cols_to_check) else row['cognition_score'], axis=1)

# df[['backwardcount_score','immediate10','delayed10','series_points','cognition_score']]

# df['vandalism']=8-df['vandalism']
# df['vacancy']=8-df['vacancy']
# df['safety']=8-df['safety']
# df['rubbish']=8-df['rubbish']

# physical_disorder_score=[]
# for i in df[['vandalism','vacancy','safety','rubbish']].values:
#   if(np.sum(np.isnan(i))>2):
#     physical_disorder_score.append(np.nan)
#   else:
#     physical_disorder_score.append(np.sum(np.nan_to_num(i, nan=0))/(4-np.sum(np.isnan(i))))


# df['physical_disorder_score']=physical_disorder_score
# df[['vandalism','vacancy','safety','rubbish']+['physical_disorder_score']]

# df['belonging']=8-df['belonging']
# df['help']=8-df['help']
# df['trust']=8-df['trust']
# df['friendliness']=8-df['friendliness']

# social_cohesion_score=[]
# for i in df[['belonging','help','trust','friendliness']].values:
#   if(np.sum(np.isnan(i))>2):
#     social_cohesion_score.append(np.nan)
#   else:
#     social_cohesion_score.append(np.sum(np.nan_to_num(i, nan=0))/((4-np.sum(np.isnan(i)))))


# df['social_cohesion_score']=social_cohesion_score

# df['sex']=df['sex'].replace({1:"Male",2:"Female"})

# df['race']=df['race'].replace({1:"white",2:"Black/African American",97:"Other",98:'DK',99:'RF'})

# df['hispanic']=df['hispanic'].replace({1:"Hispanic",5:"Non-Hispanic",8:'DK',9:'RF'})

# df['race_ethnicity']=df['hispanic']+" "+df['race']

# df['race_ethnicity'].value_counts()

# df['race_ethnicity'].unique()

# temp_dict={'Hispanic white':"Hispanic",
#            'Non-Hispanic Other':'Other',
#           'Hispanic Other':"Hispanic",
#           'Hispanic Black/African American':"Hispanic",
#            'DK white':'DK/RF',
#            'Hispanic RF':"Hispanic",
#         'Non-Hispanic DK':'DK/RF',
#             'Non-Hispanic RF':'DK/RF',
#            'DK Black/African American':'DK/RF',
#           'RF white':'DK/RF',
#            'Hispanic DK':"Hispanic",
#            'DK Other':'Other',
#            'DK DK':'DK/RF',
#            'RF RF':'DK/RF',
#            'RF Other':'Other'

#            }

# df['race_ethnicity']=df['race_ethnicity'].replace(temp_dict)

# df.columns

# df['citizenship']=df['citizenship'].replace({1:'US Citizen',9:np.nan,5:'Not US Citizen',8:'DK'})

# df['USborn']=df['USborn'].replace({1:'US Born',9:np.nan,5:'Not born in US'})

# df['genhealth']=df['genhealth'].replace({8:np.nan,9:np.nan})

# df['selfmemory']=df['selfmemory'].replace({8:np.nan,9:np.nan})

# df['cognition_category']=np.nan
# df.loc[df['cognition_score']<=15,'cognition_category']='Normal'
# df.loc[df['cognition_score']>15,'cognition_category']='Not Normal'

# df[['cognition_score','cognition_category']]

# df.to_csv('cleaned_data.csv',index=False)

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.xticks(rotation=45)
sns.boxplot(data=df,x='race_ethnicity',y='cognition_score')

sns.histplot(df['physical_disorder_score'])

sns.histplot(df['cognition_score'])

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with 'cognition_score' and 'physical_disorder_score' columns
average_scores = df.groupby('cognition_score')['physical_disorder_score'].mean().reset_index(name='average_score')
score_counts = df['cognition_score'].value_counts().reset_index(name='sample_count')

# Merge the DataFrames on 'cognition_score'
result_df = pd.merge(average_scores, score_counts, left_on='cognition_score', right_on='index', how='left').drop('index', axis=1)

# Print the result DataFrame
print(result_df)

# Plotting
plt.plot(result_df['cognition_score'], result_df['average_score'], marker='o', label='Average Score')
plt.xlabel('Cognition Score')
plt.ylabel('Average Physical Disorder Score')
plt.title('Average Physical Disorder Score vs. Cognition Score')
plt.legend()

# Show the count of samples as text on the plot with reduced size
for i, txt in enumerate(result_df['sample_count']):
    plt.annotate(f'{txt}', (result_df['cognition_score'].iloc[i], result_df['average_score'].iloc[i]), fontsize=8)

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with 'cognition_score' and 'physical_disorder_score' columns
average_scores = df.groupby('cognition_score')['final_discrimination_score'].mean().reset_index(name='average_score')
score_counts = df['cognition_score'].value_counts().reset_index(name='sample_count')

# Merge the DataFrames on 'cognition_score'
result_df = pd.merge(average_scores, score_counts, left_on='cognition_score', right_on='index', how='left').drop('index', axis=1)

# Print the result DataFrame
print(result_df)

# Plotting
plt.plot(result_df['cognition_score'], result_df['average_score'], marker='o', label='Average Score')
plt.xlabel('Cognition Score')
plt.ylabel('Average final_discrimination_score')
plt.title('Average final_discrimination_score vs. Cognition Score')
plt.legend()

# Show the count of samples as text on the plot with reduced size
for i, txt in enumerate(result_df['sample_count']):
    plt.annotate(f'{txt}', (result_df['cognition_score'].iloc[i], result_df['average_score'].iloc[i]), fontsize=8)

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with 'cognition_score' and 'social_cohesion_score' columns
average_scores = df.groupby('cognition_score')['social_cohesion_score'].mean().reset_index(name='average_score')
score_counts = df['cognition_score'].value_counts().reset_index(name='sample_count')

# Merge the DataFrames on 'cognition_score'
result_df = pd.merge(average_scores, score_counts, left_on='cognition_score', right_on='index', how='left').drop('index', axis=1)

# Print the result DataFrame
print(result_df)

# Plotting
plt.plot(result_df['cognition_score'], result_df['average_score'], marker='o', label='Average Score')
plt.xlabel('Cognition Score')
plt.ylabel('Average social_cohesion_score')
plt.title('Average social_cohesion_score vs. Cognition Score')
plt.legend()

# Show the count of samples as text on the plot with reduced size
for i, txt in enumerate(result_df['sample_count']):
    plt.annotate(f'{txt}', (result_df['cognition_score'].iloc[i], result_df['average_score'].iloc[i]), fontsize=8)

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with 'cognition_score' and 'physical_disorder_score' columns
average_scores = df.groupby('social_cohesion_score')['physical_disorder_score'].mean().reset_index(name='average_score')
score_counts = df['social_cohesion_score'].value_counts().reset_index(name='sample_count')

# Merge the DataFrames on 'cognition_score'
result_df = pd.merge(average_scores, score_counts, left_on='social_cohesion_score', right_on='index', how='left').drop('index', axis=1)

# Print the result DataFrame
print(result_df)

# Plotting
plt.plot(result_df['social_cohesion_score'], result_df['average_score'], marker='o', label='Average Score')
plt.xlabel('social_cohesion_score')
plt.ylabel('Average Physical Disorder Score')
plt.title('Average Physical Disorder Score vs. social_cohesion_score')
plt.legend()

# Show the count of samples as text on the plot with reduced size
for i, txt in enumerate(result_df['sample_count']):
    plt.annotate(f'{txt}', (result_df['social_cohesion_score'].iloc[i], result_df['average_score'].iloc[i]), fontsize=8)

plt.show()

df.columns

for i in df['USborn'].unique():
  mask=df['USborn']==i
  print('For USborn = ',i)
  print('Average: ',df.loc[mask,'cognition_score'].mean())
  print('SD: ',df.loc[mask,'cognition_score'].std(),'\n')

import pandas as pd
from scipy.stats import f_oneway
df_dropped=df[['USborn','cognition_score']].dropna()
# Assuming df is your DataFrame with 'group_variable' as the categorical variable and 'score_variable' as the continuous variable
groups = [1,5]

# Perform ANOVA
anova_results = f_oneway(*(df_dropped[df_dropped['USborn'] == group]['cognition_score'] for group in groups))

# Display the ANOVA results
print("ANOVA Results:")
print(anova_results)

# Check the p-value to determine if there are significant differences
if anova_results.pvalue < 0.05:
    print("There are significant differences between groups.")
else:
    print("There are no significant differences between groups.")

import pandas as pd
from scipy.stats import f_oneway
df_dropped=df[['race_ethnicity','cognition_score']].dropna()
# Assuming df is your DataFrame with 'group_variable' as the categorical variable and 'score_variable' as the continuous variable
groups = df_dropped['race_ethnicity'].unique()

# Perform ANOVA
anova_results = f_oneway(*(df_dropped[df_dropped['race_ethnicity'] == group]['cognition_score'] for group in groups))

# Display the ANOVA results
print("ANOVA Results:")
print(anova_results)

# Check the p-value to determine if there are significant differences
if anova_results.pvalue < 0.05:
    print("There are significant differences between groups.")
else:
    print("There are no significant differences between groups.")

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with 'cognition_score' and 'physical_disorder_score' columns
average_scores = df.groupby('cognition_score')['selfmemory'].mean().reset_index(name='average_score')
score_counts = df['cognition_score'].value_counts().reset_index(name='sample_count')

# Merge the DataFrames on 'cognition_score'
result_df = pd.merge(average_scores, score_counts, left_on='cognition_score', right_on='index', how='left').drop('index', axis=1)

# Print the result DataFrame
print(result_df)

# Plotting
plt.plot(result_df['cognition_score'], result_df['average_score'], marker='o', label='Average Score')
plt.xlabel('cognition_score')
plt.ylabel('Average Self memory score')
plt.title('Average Self memory score vs. cognition_score')
plt.legend()

# Show the count of samples as text on the plot with reduced size
for i, txt in enumerate(result_df['sample_count']):
    plt.annotate(f'{txt}', (result_df['cognition_score'].iloc[i], result_df['average_score'].iloc[i]), fontsize=8)

plt.show()

